package generated.python;
import templates.RegexTest;

public class PythonTestset {
    public static RegexTest[] allTests = {
        new RegexTest("#21", "/\\u/", "", 2),
        new RegexTest("#27", "/a.b/", "acb", 0),
        new RegexTest("#28", "/a.b/", "a\nb", 1),
        new RegexTest("#29", "/a.*b/", "acc\nccb", 1),
        new RegexTest("#30", "/a.{4,5}b/", "acc\nccb", 1),
        new RegexTest("#31", "/a.b/", "a\rb", 0),
        new RegexTest("#32", "/(?s)a.b/", "a\nb", 0),
        new RegexTest("#33", "/(?s)a.*b/", "acc\nccb", 0),
        new RegexTest("#34", "/(?s)a.{4,5}b/", "acc\nccb", 0),
        new RegexTest("#35", "/(?s)a.b/", "a\nb", 0),
        new RegexTest("#36", "/)/", "", 2),
        new RegexTest("#37", "//", "", 0),
        new RegexTest("#38", "/abc/", "abc", 0),
        new RegexTest("#39", "/abc/", "xbc", 1),
        new RegexTest("#40", "/abc/", "axc", 1),
        new RegexTest("#41", "/abc/", "abx", 1),
        new RegexTest("#42", "/abc/", "xabcy", 0),
        new RegexTest("#43", "/abc/", "ababc", 0),
        new RegexTest("#44", "/ab*c/", "abc", 0),
        new RegexTest("#45", "/ab*bc/", "abc", 0),
        new RegexTest("#46", "/ab*bc/", "abbc", 0),
        new RegexTest("#47", "/ab*bc/", "abbbbc", 0),
        new RegexTest("#48", "/ab+bc/", "abbc", 0),
        new RegexTest("#49", "/ab+bc/", "abc", 1),
        new RegexTest("#50", "/ab+bc/", "abq", 1),
        new RegexTest("#51", "/ab+bc/", "abbbbc", 0),
        new RegexTest("#52", "/ab?bc/", "abbc", 0),
        new RegexTest("#53", "/ab?bc/", "abc", 0),
        new RegexTest("#54", "/ab?bc/", "abbbbc", 1),
        new RegexTest("#55", "/ab?c/", "abc", 0),
        new RegexTest("#56", "/^abc$/", "abc", 0),
        new RegexTest("#57", "/^abc$/", "abcc", 1),
        new RegexTest("#58", "/^abc/", "abcc", 0),
        new RegexTest("#59", "/^abc$/", "aabc", 1),
        new RegexTest("#60", "/abc$/", "aabc", 0),
        new RegexTest("#61", "/^/", "abc", 0),
        new RegexTest("#62", "/$/", "abc", 0),
        new RegexTest("#63", "/a.c/", "abc", 0),
        new RegexTest("#64", "/a.c/", "axc", 0),
        new RegexTest("#65", "/a.*c/", "axyzc", 0),
        new RegexTest("#66", "/a.*c/", "axyzd", 1),
        new RegexTest("#67", "/a[bc]d/", "abc", 1),
        new RegexTest("#68", "/a[bc]d/", "abd", 0),
        new RegexTest("#69", "/a[b-d]e/", "abd", 1),
        new RegexTest("#70", "/a[b-d]e/", "ace", 0),
        new RegexTest("#71", "/a[b-d]/", "aac", 0),
        new RegexTest("#72", "/a[-b]/", "a-", 0),
        new RegexTest("#73", "/a[\\-b]/", "a-", 0),
        new RegexTest("#74", "/a[]b/", "-", 2),
        new RegexTest("#75", "/a[/", "-", 2),
        new RegexTest("#76", "/a\\/", "-", 2),
        new RegexTest("#77", "/abc)/", "-", 2),
        new RegexTest("#78", "/(abc/", "-", 2),
        new RegexTest("#79", "/a]/", "a]", 0),
        new RegexTest("#80", "/a[]]b/", "a]b", 0),
        new RegexTest("#81", "/a[\\]]b/", "a]b", 0),
        new RegexTest("#82", "/a[^bc]d/", "aed", 0),
        new RegexTest("#83", "/a[^bc]d/", "abd", 1),
        new RegexTest("#84", "/a[^-b]c/", "adc", 0),
        new RegexTest("#85", "/a[^-b]c/", "a-c", 1),
        new RegexTest("#86", "/a[^]b]c/", "a]c", 1),
        new RegexTest("#87", "/a[^]b]c/", "adc", 0),
        new RegexTest("#107", "/ab|cd/", "abc", 0),
        new RegexTest("#108", "/ab|cd/", "abcd", 0),
        new RegexTest("#109", "/()ef/", "def", 0),
        new RegexTest("#110", "/$b/", "b", 1),
        new RegexTest("#111", "/a\\(b/", "a(b", 0),
        new RegexTest("#112", "/a\\(*b/", "ab", 0),
        new RegexTest("#113", "/a\\(*b/", "a((b", 0),
        new RegexTest("#115", "/((a))/", "abc", 0),
        new RegexTest("#116", "/(a)b(c)/", "abc", 0),
        new RegexTest("#117", "/a+b+c/", "aabbabc", 0),
        new RegexTest("#118", "/(a+|b)*/", "ab", 0),
        new RegexTest("#119", "/(a+|b)+/", "ab", 0),
        new RegexTest("#120", "/(a+|b)?/", "ab", 0),
        new RegexTest("#121", "/)(/", "-", 2),
        new RegexTest("#122", "/[^ab]*/", "cde", 0),
        new RegexTest("#123", "/abc/", "", 1),
        new RegexTest("#124", "/a*/", "", 0),
        new RegexTest("#125", "/a|b|c|d|e/", "e", 0),
        new RegexTest("#126", "/(a|b|c|d|e)f/", "ef", 0),
        new RegexTest("#127", "/abcd*efg/", "abcdefg", 0),
        new RegexTest("#128", "/ab*/", "xabyabbbz", 0),
        new RegexTest("#129", "/ab*/", "xayabbbz", 0),
        new RegexTest("#130", "/(ab|cd)e/", "abcde", 0),
        new RegexTest("#131", "/[abhgefdc]ij/", "hij", 0),
        new RegexTest("#132", "/^(ab|cd)e/", "abcde", 1),
        new RegexTest("#133", "/(abc|)ef/", "abcdef", 0),
        new RegexTest("#134", "/(a|b)c*d/", "abcd", 0),
        new RegexTest("#135", "/(ab|ab*)bc/", "abc", 0),
        new RegexTest("#136", "/a([bc]*)c*/", "abc", 0),
        new RegexTest("#137", "/a([bc]*)(c*d)/", "abcd", 0),
        new RegexTest("#138", "/a([bc]+)(c*d)/", "abcd", 0),
        new RegexTest("#139", "/a([bc]*)(c+d)/", "abcd", 0),
        new RegexTest("#140", "/a[bcd]*dcdcde/", "adcdcde", 0),
        new RegexTest("#141", "/a[bcd]+dcdcde/", "adcdcde", 1),
        new RegexTest("#142", "/(ab|a)b*c/", "abc", 0),
        new RegexTest("#143", "/((a)(b)c)(d)/", "abcd", 0),
        new RegexTest("#144", "/[a-zA-Z_][a-zA-Z0-9_]*/", "alpha", 0),
        new RegexTest("#145", "/^a(bc+|b[eh])g|.h$/", "abh", 0),
        new RegexTest("#146", "/(bc+d$|ef*g.|h?i(j|k))/", "effgz", 0),
        new RegexTest("#147", "/(bc+d$|ef*g.|h?i(j|k))/", "ij", 0),
        new RegexTest("#148", "/(bc+d$|ef*g.|h?i(j|k))/", "effg", 1),
        new RegexTest("#149", "/(bc+d$|ef*g.|h?i(j|k))/", "bcdd", 1),
        new RegexTest("#150", "/(bc+d$|ef*g.|h?i(j|k))/", "reffgz", 0),
        new RegexTest("#151", "/(((((((((a)))))))))/", "a", 0),
        new RegexTest("#152", "/multiple words of text/", "uh-uh", 1),
        new RegexTest("#153", "/multiple words/", "multiple words, yeah", 0),
        new RegexTest("#154", "/(.*)c(.*)/", "abcde", 0),
        new RegexTest("#155", "/\\((.*), (.*)\\)/", "(a, b)", 0),
        new RegexTest("#156", "/[k]/", "ab", 1),
        new RegexTest("#157", "/a[-]?c/", "ac", 0),
        new RegexTest("#160", "/^(.+)?B/", "AB", 0),
        new RegexTest("#174", "/(a)(b)c|ab/", "ab", 0),
        new RegexTest("#175", "/(a)+x/", "aaax", 0),
        new RegexTest("#176", "/([ac])+x/", "aacx", 0),
        new RegexTest("#177", "/([^/]*/)*sub1//", "d:msgs/tdir/sub1/trial/away.cpp", 0),
        new RegexTest("#178", "/([^.]*)\\.([^:]*):[T ]+(.*)/", "track1.title:TBlah blah blah", 0),
        new RegexTest("#179", "/([^N]*N)+/", "abNNxyzN", 0),
        new RegexTest("#180", "/([^N]*N)+/", "abNNxyz", 0),
        new RegexTest("#181", "/([abc]*)x/", "abcx", 0),
        new RegexTest("#182", "/([abc]*)x/", "abc", 1),
        new RegexTest("#183", "/([xyz]*)x/", "abcx", 0),
        new RegexTest("#184", "/(a)+b|aac/", "aac", 0),
        new RegexTest("#193", "/abc/", "abc", 0),
        new RegexTest("#194", "/abc/", "xbc", 1),
        new RegexTest("#195", "/abc/", "axc", 1),
        new RegexTest("#196", "/abc/", "abx", 1),
        new RegexTest("#197", "/abc/", "xabcy", 0),
        new RegexTest("#198", "/abc/", "ababc", 0),
        new RegexTest("#199", "/ab*c/", "abc", 0),
        new RegexTest("#200", "/ab*bc/", "abc", 0),
        new RegexTest("#201", "/ab*bc/", "abbc", 0),
        new RegexTest("#202", "/ab*bc/", "abbbbc", 0),
        new RegexTest("#203", "/ab{0,}bc/", "abbbbc", 0),
        new RegexTest("#204", "/ab+bc/", "abbc", 0),
        new RegexTest("#205", "/ab+bc/", "abc", 1),
        new RegexTest("#206", "/ab+bc/", "abq", 1),
        new RegexTest("#207", "/ab{1,}bc/", "abq", 1),
        new RegexTest("#208", "/ab+bc/", "abbbbc", 0),
        new RegexTest("#209", "/ab{1,}bc/", "abbbbc", 0),
        new RegexTest("#210", "/ab{1,3}bc/", "abbbbc", 0),
        new RegexTest("#211", "/ab{3,4}bc/", "abbbbc", 0),
        new RegexTest("#212", "/ab{4,5}bc/", "abbbbc", 1),
        new RegexTest("#213", "/ab?bc/", "abbc", 0),
        new RegexTest("#214", "/ab?bc/", "abc", 0),
        new RegexTest("#215", "/ab{0,1}bc/", "abc", 0),
        new RegexTest("#216", "/ab?bc/", "abbbbc", 1),
        new RegexTest("#217", "/ab?c/", "abc", 0),
        new RegexTest("#218", "/ab{0,1}c/", "abc", 0),
        new RegexTest("#219", "/^abc$/", "abc", 0),
        new RegexTest("#220", "/^abc$/", "abcc", 1),
        new RegexTest("#221", "/^abc/", "abcc", 0),
        new RegexTest("#222", "/^abc$/", "aabc", 1),
        new RegexTest("#223", "/abc$/", "aabc", 0),
        new RegexTest("#224", "/^/", "abc", 0),
        new RegexTest("#225", "/$/", "abc", 0),
        new RegexTest("#226", "/a.c/", "abc", 0),
        new RegexTest("#227", "/a.c/", "axc", 0),
        new RegexTest("#228", "/a.*c/", "axyzc", 0),
        new RegexTest("#229", "/a.*c/", "axyzd", 1),
        new RegexTest("#230", "/a[bc]d/", "abc", 1),
        new RegexTest("#231", "/a[bc]d/", "abd", 0),
        new RegexTest("#232", "/a[b-d]e/", "abd", 1),
        new RegexTest("#233", "/a[b-d]e/", "ace", 0),
        new RegexTest("#234", "/a[b-d]/", "aac", 0),
        new RegexTest("#235", "/a[-b]/", "a-", 0),
        new RegexTest("#236", "/a[b-]/", "a-", 0),
        new RegexTest("#237", "/a[b-a]/", "-", 2),
        new RegexTest("#238", "/a[]b/", "-", 2),
        new RegexTest("#239", "/a[/", "-", 2),
        new RegexTest("#240", "/a]/", "a]", 0),
        new RegexTest("#241", "/a[]]b/", "a]b", 0),
        new RegexTest("#242", "/a[^bc]d/", "aed", 0),
        new RegexTest("#243", "/a[^bc]d/", "abd", 1),
        new RegexTest("#244", "/a[^-b]c/", "adc", 0),
        new RegexTest("#245", "/a[^-b]c/", "a-c", 1),
        new RegexTest("#246", "/a[^]b]c/", "a]c", 1),
        new RegexTest("#247", "/a[^]b]c/", "adc", 0),
        new RegexTest("#248", "/ab|cd/", "abc", 0),
        new RegexTest("#249", "/ab|cd/", "abcd", 0),
        new RegexTest("#250", "/()ef/", "def", 0),
        new RegexTest("#251", "/*a/", "-", 2),
        new RegexTest("#252", "/(*)b/", "-", 2),
        new RegexTest("#253", "/$b/", "b", 1),
        new RegexTest("#254", "/a\\/", "-", 2),
        new RegexTest("#255", "/a\\(b/", "a(b", 0),
        new RegexTest("#256", "/a\\(*b/", "ab", 0),
        new RegexTest("#257", "/a\\(*b/", "a((b", 0),
        new RegexTest("#259", "/abc)/", "-", 2),
        new RegexTest("#260", "/(abc/", "-", 2),
        new RegexTest("#261", "/((a))/", "abc", 0),
        new RegexTest("#262", "/(a)b(c)/", "abc", 0),
        new RegexTest("#263", "/a+b+c/", "aabbabc", 0),
        new RegexTest("#264", "/a{1,}b{1,}c/", "aabbabc", 0),
        new RegexTest("#265", "/a**/", "-", 2),
        new RegexTest("#266", "/a.+?c/", "abcabc", 0),
        new RegexTest("#267", "/(a+|b)*/", "ab", 0),
        new RegexTest("#268", "/(a+|b){0,}/", "ab", 0),
        new RegexTest("#269", "/(a+|b)+/", "ab", 0),
        new RegexTest("#270", "/(a+|b){1,}/", "ab", 0),
        new RegexTest("#271", "/(a+|b)?/", "ab", 0),
        new RegexTest("#272", "/(a+|b){0,1}/", "ab", 0),
        new RegexTest("#273", "/)(/", "-", 2),
        new RegexTest("#274", "/[^ab]*/", "cde", 0),
        new RegexTest("#275", "/abc/", "", 1),
        new RegexTest("#276", "/a*/", "", 0),
        new RegexTest("#277", "/([abc])*d/", "abbbcd", 0),
        new RegexTest("#278", "/([abc])*bcd/", "abcd", 0),
        new RegexTest("#279", "/a|b|c|d|e/", "e", 0),
        new RegexTest("#280", "/(a|b|c|d|e)f/", "ef", 0),
        new RegexTest("#281", "/abcd*efg/", "abcdefg", 0),
        new RegexTest("#282", "/ab*/", "xabyabbbz", 0),
        new RegexTest("#283", "/ab*/", "xayabbbz", 0),
        new RegexTest("#284", "/(ab|cd)e/", "abcde", 0),
        new RegexTest("#285", "/[abhgefdc]ij/", "hij", 0),
        new RegexTest("#286", "/^(ab|cd)e/", "abcde", 1),
        new RegexTest("#287", "/(abc|)ef/", "abcdef", 0),
        new RegexTest("#288", "/(a|b)c*d/", "abcd", 0),
        new RegexTest("#289", "/(ab|ab*)bc/", "abc", 0),
        new RegexTest("#290", "/a([bc]*)c*/", "abc", 0),
        new RegexTest("#291", "/a([bc]*)(c*d)/", "abcd", 0),
        new RegexTest("#292", "/a([bc]+)(c*d)/", "abcd", 0),
        new RegexTest("#293", "/a([bc]*)(c+d)/", "abcd", 0),
        new RegexTest("#294", "/a[bcd]*dcdcde/", "adcdcde", 0),
        new RegexTest("#295", "/a[bcd]+dcdcde/", "adcdcde", 1),
        new RegexTest("#296", "/(ab|a)b*c/", "abc", 0),
        new RegexTest("#297", "/((a)(b)c)(d)/", "abcd", 0),
        new RegexTest("#298", "/[a-zA-Z_][a-zA-Z0-9_]*/", "alpha", 0),
        new RegexTest("#299", "/^a(bc+|b[eh])g|.h$/", "abh", 0),
        new RegexTest("#300", "/(bc+d$|ef*g.|h?i(j|k))/", "effgz", 0),
        new RegexTest("#301", "/(bc+d$|ef*g.|h?i(j|k))/", "ij", 0),
        new RegexTest("#302", "/(bc+d$|ef*g.|h?i(j|k))/", "effg", 1),
        new RegexTest("#303", "/(bc+d$|ef*g.|h?i(j|k))/", "bcdd", 1),
        new RegexTest("#304", "/(bc+d$|ef*g.|h?i(j|k))/", "reffgz", 0),
        new RegexTest("#305", "/((((((((((a))))))))))/", "a", 0),
        new RegexTest("#309", "/(((((((((a)))))))))/", "a", 0),
        new RegexTest("#310", "/multiple words of text/", "uh-uh", 1),
        new RegexTest("#311", "/multiple words/", "multiple words, yeah", 0),
        new RegexTest("#312", "/(.*)c(.*)/", "abcde", 0),
        new RegexTest("#313", "/\\((.*), (.*)\\)/", "(a, b)", 0),
        new RegexTest("#314", "/[k]/", "ab", 1),
        new RegexTest("#315", "/a[-]?c/", "ac", 0),
        new RegexTest("#318", "/abc/i", "ABC", 0),
        new RegexTest("#319", "/abc/i", "XBC", 1),
        new RegexTest("#320", "/abc/i", "AXC", 1),
        new RegexTest("#321", "/abc/i", "ABX", 1),
        new RegexTest("#322", "/abc/i", "XABCY", 0),
        new RegexTest("#323", "/abc/i", "ABABC", 0),
        new RegexTest("#324", "/ab*c/i", "ABC", 0),
        new RegexTest("#325", "/ab*bc/i", "ABC", 0),
        new RegexTest("#326", "/ab*bc/i", "ABBC", 0),
        new RegexTest("#327", "/ab*?bc/i", "ABBBBC", 0),
        new RegexTest("#328", "/ab{0,}?bc/i", "ABBBBC", 0),
        new RegexTest("#329", "/ab+?bc/i", "ABBC", 0),
        new RegexTest("#330", "/ab+bc/i", "ABC", 1),
        new RegexTest("#331", "/ab+bc/i", "ABQ", 1),
        new RegexTest("#332", "/ab{1,}bc/i", "ABQ", 1),
        new RegexTest("#333", "/ab+bc/i", "ABBBBC", 0),
        new RegexTest("#334", "/ab{1,}?bc/i", "ABBBBC", 0),
        new RegexTest("#335", "/ab{1,3}?bc/i", "ABBBBC", 0),
        new RegexTest("#336", "/ab{3,4}?bc/i", "ABBBBC", 0),
        new RegexTest("#337", "/ab{4,5}?bc/i", "ABBBBC", 1),
        new RegexTest("#338", "/ab??bc/i", "ABBC", 0),
        new RegexTest("#339", "/ab??bc/i", "ABC", 0),
        new RegexTest("#340", "/ab{0,1}?bc/i", "ABC", 0),
        new RegexTest("#341", "/ab??bc/i", "ABBBBC", 1),
        new RegexTest("#342", "/ab??c/i", "ABC", 0),
        new RegexTest("#343", "/ab{0,1}?c/i", "ABC", 0),
        new RegexTest("#344", "/^abc$/i", "ABC", 0),
        new RegexTest("#345", "/^abc$/i", "ABCC", 1),
        new RegexTest("#346", "/^abc/i", "ABCC", 0),
        new RegexTest("#347", "/^abc$/i", "AABC", 1),
        new RegexTest("#348", "/abc$/i", "AABC", 0),
        new RegexTest("#349", "/^/i", "ABC", 0),
        new RegexTest("#350", "/$/i", "ABC", 0),
        new RegexTest("#351", "/a.c/i", "ABC", 0),
        new RegexTest("#352", "/a.c/i", "AXC", 0),
        new RegexTest("#353", "/a.*?c/i", "AXYZC", 0),
        new RegexTest("#354", "/a.*c/i", "AXYZD", 1),
        new RegexTest("#355", "/a[bc]d/i", "ABC", 1),
        new RegexTest("#356", "/a[bc]d/i", "ABD", 0),
        new RegexTest("#357", "/a[b-d]e/i", "ABD", 1),
        new RegexTest("#358", "/a[b-d]e/i", "ACE", 0),
        new RegexTest("#359", "/a[b-d]/i", "AAC", 0),
        new RegexTest("#360", "/a[-b]/i", "A-", 0),
        new RegexTest("#361", "/a[b-]/i", "A-", 0),
        new RegexTest("#362", "/a[b-a]/i", "-", 2),
        new RegexTest("#363", "/a[]b/i", "-", 2),
        new RegexTest("#364", "/a[/i", "-", 2),
        new RegexTest("#365", "/a]/i", "A]", 0),
        new RegexTest("#366", "/a[]]b/i", "A]B", 0),
        new RegexTest("#367", "/a[^bc]d/i", "AED", 0),
        new RegexTest("#368", "/a[^bc]d/i", "ABD", 1),
        new RegexTest("#369", "/a[^-b]c/i", "ADC", 0),
        new RegexTest("#370", "/a[^-b]c/i", "A-C", 1),
        new RegexTest("#371", "/a[^]b]c/i", "A]C", 1),
        new RegexTest("#372", "/a[^]b]c/i", "ADC", 0),
        new RegexTest("#373", "/ab|cd/i", "ABC", 0),
        new RegexTest("#374", "/ab|cd/i", "ABCD", 0),
        new RegexTest("#375", "/()ef/i", "DEF", 0),
        new RegexTest("#376", "/*a/i", "-", 2),
        new RegexTest("#377", "/(*)b/i", "-", 2),
        new RegexTest("#378", "/$b/i", "B", 1),
        new RegexTest("#379", "/a\\/i", "-", 2),
        new RegexTest("#380", "/a\\(b/i", "A(B", 0),
        new RegexTest("#381", "/a\\(*b/i", "AB", 0),
        new RegexTest("#382", "/a\\(*b/i", "A((B", 0),
        new RegexTest("#384", "/abc)/i", "-", 2),
        new RegexTest("#385", "/(abc/i", "-", 2),
        new RegexTest("#386", "/((a))/i", "ABC", 0),
        new RegexTest("#387", "/(a)b(c)/i", "ABC", 0),
        new RegexTest("#388", "/a+b+c/i", "AABBABC", 0),
        new RegexTest("#389", "/a{1,}b{1,}c/i", "AABBABC", 0),
        new RegexTest("#390", "/a**/i", "-", 2),
        new RegexTest("#391", "/a.+?c/i", "ABCABC", 0),
        new RegexTest("#392", "/a.*?c/i", "ABCABC", 0),
        new RegexTest("#393", "/a.{0,5}?c/i", "ABCABC", 0),
        new RegexTest("#394", "/(a+|b)*/i", "AB", 0),
        new RegexTest("#395", "/(a+|b){0,}/i", "AB", 0),
        new RegexTest("#396", "/(a+|b)+/i", "AB", 0),
        new RegexTest("#397", "/(a+|b){1,}/i", "AB", 0),
        new RegexTest("#398", "/(a+|b)?/i", "AB", 0),
        new RegexTest("#399", "/(a+|b){0,1}/i", "AB", 0),
        new RegexTest("#400", "/(a+|b){0,1}?/i", "AB", 0),
        new RegexTest("#401", "/)(/i", "-", 2),
        new RegexTest("#402", "/[^ab]*/i", "CDE", 0),
        new RegexTest("#403", "/abc/i", "", 1),
        new RegexTest("#404", "/a*/i", "", 0),
        new RegexTest("#405", "/([abc])*d/i", "ABBBCD", 0),
        new RegexTest("#406", "/([abc])*bcd/i", "ABCD", 0),
        new RegexTest("#407", "/a|b|c|d|e/i", "E", 0),
        new RegexTest("#408", "/(a|b|c|d|e)f/i", "EF", 0),
        new RegexTest("#409", "/abcd*efg/i", "ABCDEFG", 0),
        new RegexTest("#410", "/ab*/i", "XABYABBBZ", 0),
        new RegexTest("#411", "/ab*/i", "XAYABBBZ", 0),
        new RegexTest("#412", "/(ab|cd)e/i", "ABCDE", 0),
        new RegexTest("#413", "/[abhgefdc]ij/i", "HIJ", 0),
        new RegexTest("#414", "/^(ab|cd)e/i", "ABCDE", 1),
        new RegexTest("#415", "/(abc|)ef/i", "ABCDEF", 0),
        new RegexTest("#416", "/(a|b)c*d/i", "ABCD", 0),
        new RegexTest("#417", "/(ab|ab*)bc/i", "ABC", 0),
        new RegexTest("#418", "/a([bc]*)c*/i", "ABC", 0),
        new RegexTest("#419", "/a([bc]*)(c*d)/i", "ABCD", 0),
        new RegexTest("#420", "/a([bc]+)(c*d)/i", "ABCD", 0),
        new RegexTest("#421", "/a([bc]*)(c+d)/i", "ABCD", 0),
        new RegexTest("#422", "/a[bcd]*dcdcde/i", "ADCDCDE", 0),
        new RegexTest("#423", "/a[bcd]+dcdcde/i", "ADCDCDE", 1),
        new RegexTest("#424", "/(ab|a)b*c/i", "ABC", 0),
        new RegexTest("#425", "/((a)(b)c)(d)/i", "ABCD", 0),
        new RegexTest("#426", "/[a-zA-Z_][a-zA-Z0-9_]*/i", "ALPHA", 0),
        new RegexTest("#427", "/^a(bc+|b[eh])g|.h$/i", "ABH", 0),
        new RegexTest("#428", "/(bc+d$|ef*g.|h?i(j|k))/i", "EFFGZ", 0),
        new RegexTest("#429", "/(bc+d$|ef*g.|h?i(j|k))/i", "IJ", 0),
        new RegexTest("#430", "/(bc+d$|ef*g.|h?i(j|k))/i", "EFFG", 1),
        new RegexTest("#431", "/(bc+d$|ef*g.|h?i(j|k))/i", "BCDD", 1),
        new RegexTest("#432", "/(bc+d$|ef*g.|h?i(j|k))/i", "REFFGZ", 0),
        new RegexTest("#433", "/((((((((((a))))))))))/i", "A", 0),
        new RegexTest("#435", "/(((((((((a)))))))))/i", "A", 0),
        new RegexTest("#438", "/multiple words of text/i", "UH-UH", 1),
        new RegexTest("#439", "/multiple words/i", "MULTIPLE WORDS, YEAH", 0),
        new RegexTest("#440", "/(.*)c(.*)/i", "ABCDE", 0),
        new RegexTest("#441", "/\\((.*), (.*)\\)/i", "(A, B)", 0),
        new RegexTest("#442", "/[k]/i", "AB", 1),
        new RegexTest("#443", "/a[-]?c/i", "AC", 0),
        new RegexTest("#453", "/^(.+)?B/", "AB", 0),
        new RegexTest("#459", "/w/i", "W", 0),
        new RegexTest("#460", "/(?x)w# comment 1\n        x y\n        # comment 2\n        z/", "wxyz", 0),
        new RegexTest("#461", "/^abc/", "jkl\nabc\nxyz", 1),
        new RegexTest("#462", "/(?m)^abc/", "jkl\nabc\nxyz", 0),
        new RegexTest("#463", "/(?m)abc$/", "jkl\nxyzabc\n123", 0),
        new RegexTest("#464", "/a.b/", "a\nb", 1),
        new RegexTest("#465", "/(?s)a.b/", "a\nb", 0),
        new RegexTest("#466", "/\\w+/", "--ab_cd0123--", 0),
        new RegexTest("#467", "/[\\w]+/", "--ab_cd0123--", 0),
        new RegexTest("#468", "/\\D+/", "1234abc5678", 0),
        new RegexTest("#469", "/[\\D]+/", "1234abc5678", 0),
        new RegexTest("#470", "/[\\da-fA-F]+/", "123abc", 0),
        new RegexTest("#471", "/([\\s]*)([\\S]*)([\\s]*)/", " testing!1972", 0),
        new RegexTest("#472", "/(\\s*)(\\S*)(\\s*)/", " testing!1972", 0),
        new RegexTest("#479", "/(([a-z]+):)?([a-z]+)$/", "smil", 0),
        new RegexTest("#481", "/.*d/", "abc\nabd", 0),
        new RegexTest("#482", "/(/", "", 2),
        new RegexTest("#484", "/(x?)?/", "x", 0),
        new RegexTest("#485", "/(?x) foo /", "foo", 0),
        new RegexTest("#487", "/[\\w-]+/", "laser_beam", 0),
        new RegexTest("#488", "/.*?\\S *:/", "xx:", 0),
        new RegexTest("#489", "/a[ ]*?\\ (\\d+).*/", "a   10", 0),
        new RegexTest("#490", "/a[ ]*?\\ (\\d+).*/", "a    10", 0),
        new RegexTest("#491", "/(?ms).*?x\\s*\\Z(.*)/", "xx\nx\n", 0),
        new RegexTest("#492", "/M+/i", "MMM", 0),
        new RegexTest("#493", "/m+/i", "MMM", 0),
        new RegexTest("#494", "/[M]+/i", "MMM", 0),
        new RegexTest("#495", "/[m]+/i", "MMM", 0),
        new RegexTest("#496", "/^*/", "", 2),
        new RegexTest("#498", "/^.*?$/", "one\ntwo\nthree\n", 1),
        new RegexTest("#499", "/a[^>]*?b/", "a>b", 1),
        new RegexTest("#500", "/^a*?$/", "foo", 1),
        new RegexTest("#501", "/^((a)c)?(ab)$/", "ab", 0),
    };
}
